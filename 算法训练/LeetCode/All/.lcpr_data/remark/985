{"data":[{"name":"2024-11-23 15:05:40","id":1732345540669,"body":"\r\n\r\n```thinking\r\n让我深入分析这道令牌放置问题...\r\n\r\n核心要点：\r\n1. 贪心策略：\r\n   - 使用最小的令牌来获取分数\r\n   - 使用最大的令牌来获取能量\r\n2. 双指针技巧：\r\n   - 左指针处理最小令牌\r\n   - 右指针处理最大令牌\r\n3. 关键决策：\r\n   - 何时获取分数\r\n   - 何时获取能量\r\n   - 何时停止\r\n\r\n需要重点解释：\r\n1. 为什么要排序\r\n2. 贪心策略的正确性\r\n3. 终止条件的选择\r\n```\r\n\r\n# [948. 令牌放置](https://leetcode.cn/problems/bag-of-tokens/)\r\n\r\n## 一、题目分析\r\n\r\n### 1. 题目要求\r\n- 给定一个令牌数组 tokens 和初始能量 power\r\n- 可以执行两种操作：\r\n  1. 消耗 power ≥ tokens[i] 的能量，获得 1 分\r\n  2. 消耗 1 分，获得 tokens[i] 的能量\r\n- 求最大可获得的分数\r\n\r\n### 2. 示例\r\n```\r\n输入：tokens = [100,200,300,400], power = 200\r\n输出：2\r\n解释：\r\n1. 使用 100 能量获得 1 分\r\n2. 使用 200 能量获得 1 分\r\n最大分数 = 2\r\n```\r\n\r\n## 二、解题思路\r\n\r\n### 1. 贪心策略\r\n- 要获得分数时，应该使用最小的令牌\r\n- 要获得能量时，应该使用最大的令牌\r\n- 所以需要先对数组排序\r\n\r\n### 2. 双指针技巧\r\n- left 指向最小的令牌\r\n- right 指向最大的令牌\r\n- 在两个指针之间移动，进行操作\r\n\r\n## 三、代码详解\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    int bagOfTokensScore(vector<int>& tokens, int power) {\r\n        int n = tokens.size();\r\n        int score = 0;      // 当前分数\r\n        int ans = 0;        // 最大分数\r\n        \r\n        // 排序以便使用双指针\r\n        sort(tokens.begin(), tokens.end());\r\n        int left = 0, right = n - 1;\r\n        \r\n        while (left <= right) {\r\n            if (power >= tokens[left]) {\r\n                // 情况1：有足够能量，获取分数\r\n                power -= tokens[left];\r\n                score++;\r\n                left++;\r\n                ans = max(ans, score);  // 更新最大分数\r\n            }\r\n            else if (score > 0 && power < tokens[left]) {\r\n                // 情况2：能量不足但有分数，获取能量\r\n                score--;\r\n                power += tokens[right];\r\n                right--;\r\n            }\r\n            else {\r\n                // 情况3：无法继续操作\r\n                break;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n## 四、重点解析\r\n\r\n### 1. 为什么要排序\r\n- 贪心策略要求使用最小的令牌获取分数\r\n- 使用最大的令牌获取能量\r\n- 排序后可以用双指针轻松找到最大和最小值\r\n\r\n### 2. 三种情况分析\r\n```cpp\r\n// 情况1：有足够能量获取分数\r\nif (power >= tokens[left]) {\r\n    power -= tokens[left];\r\n    score++;\r\n    left++;\r\n    ans = max(ans, score);\r\n}\r\n\r\n// 情况2：能量不足但可以消耗分数获取能量\r\nelse if (score > 0 && power < tokens[left]) {\r\n    score--;\r\n    power += tokens[right];\r\n    right--;\r\n}\r\n\r\n// 情况3：无法继续操作\r\nelse {\r\n    break;\r\n}\r\n```\r\n\r\n### 3. 为什么需要记录最大分数\r\n- 分数可能会减少（用于获取能量）\r\n- 需要记录过程中的最大值\r\n- 使用 ans = max(ans, score) 更新\r\n\r\n## 五、复杂度分析\r\n\r\n- **时间复杂度**: O(nlogn)\r\n  - 排序需要 O(nlogn)\r\n  - 双指针遍历需要 O(n)\r\n- **空间复杂度**: O(1)\r\n  - 只使用常数额外空间\r\n\r\n## 六、相关题目\r\n- [881. 救生艇](https://leetcode.cn/problems/boats-to-save-people/)\r\n- [11. 盛最多水的容器](https://leetcode.cn/problems/container-with-most-water/)\r\n\r\n这些题目都使用了双指针技巧，可以互相参考学习。"}]}