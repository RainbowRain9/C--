{"data":[{"name":"2024-11-21 11:02:23","id":1732158143737,"body":"```thinking\r\n让我思考一下如何写这道题的笔记...\r\n\r\n首先需要理解题目的核心点:\r\n- 这是一道滑动窗口的题目,要找最长的连续子数组\r\n- 关键限制条件是子数组中任意两个元素的绝对差不超过limit\r\n- 使用multiset来维护窗口内的元素,可以方便地获取最大值和最小值\r\n- 当窗口内最大值和最小值的差超过limit时需要收缩左边界\r\n\r\n代码的重点在于:\r\n1. 使用multiset数据结构的特性\r\n2. 滑动窗口的实现方式\r\n3. 如何高效判断和维护窗口的合法性\r\n\r\n笔记应该包含:\r\n- 题目描述和分析\r\n- 解题思路\r\n- 代码实现要点\r\n- 时空复杂度分析\r\n- 一些示例说明\r\n\r\n让我组织一下笔记的内容...\r\n```\r\n\r\n# 1438.绝对差不超过限制的最长连续子数组\r\n\r\n## 题目描述\r\n给你一个整数数组 nums 和一个整数 limit，请你返回最长连续子数组的长度，该子数组中任意两个元素之间的绝对差必须小于或者等于 limit。\r\n\r\n## 解题思路\r\n1. 本题可以使用滑动窗口来解决\r\n2. 使用 multiset 来维护窗口内的元素，利用其自动排序的特性\r\n3. 通过判断窗口内最大值与最小值的差值来确定窗口的合法性\r\n\r\n## 代码实现\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    int longestSubarray(vector<int>& nums, int limit) {\r\n        multiset<int> s;\r\n        int n = nums.size();\r\n        int left = 0, right = 0;\r\n        int ans = 0;\r\n        while (right < n) {\r\n            s.insert(nums[right]);\r\n            while (*s.rbegin() - *s.begin() > limit) {\r\n                s.erase(s.find(nums[left++]));\r\n            }\r\n            ans = max(ans, right - left + 1);\r\n            right++;\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n## 要点解析\r\n1. `multiset` 的使用：\r\n   - 自动排序\r\n   - `s.begin()` 获取最小值\r\n   - `s.rbegin()` 获取最大值\r\n   - `s.find()` 查找特定元素\r\n   - `s.erase()` 删除元素\r\n\r\n2. 滑动窗口的维护：\r\n   - 右边界不断扩展\r\n   - 当不满足条件时收缩左边界\r\n   - 记录过程中的最大窗口长度\r\n\r\n## 复杂度分析\r\n- 时间复杂度：O(nlogn)，其中 n 是数组长度\r\n- 空间复杂度：O(n)，用于存储 multiset\r\n\r\n## 示例\r\n```\r\n输入：nums = [8,2,4,7], limit = 4\r\n输出：2\r\n解释：所有子数组如下：\r\n[8] 最大绝对差 |8-8| = 0 <= 4\r\n[8,2] 最大绝对差 |8-2| = 6 > 4\r\n[8,2,4] 最大绝对差 |8-2| = 6 > 4\r\n[8,2,4,7] 最大绝对差 |8-2| = 6 > 4\r\n[2] 最大绝对差 |2-2| = 0 <= 4\r\n[2,4] 最大绝对差 |4-2| = 2 <= 4\r\n[2,4,7] 最大绝对差 |7-2| = 5 > 4\r\n[4] 最大绝对差 |4-4| = 0 <= 4\r\n[4,7] 最大绝对差 |7-4| = 3 <= 4\r\n[7] 最大绝对差 |7-7| = 0 <= 4\r\n因此，满足题意的最长子数组的长度为 2。\r\n```"}]}