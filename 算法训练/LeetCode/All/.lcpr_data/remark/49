{"data":[{"name":"2024-11-29 13:32:02","id":1732858322146,"body":"```thinking\r\n让我基于这个通用模板,为LeetCode 49题编写一个详细的题解。\r\n\r\n首先整理下关键信息:\r\n1. 题目本质是字符串分组问题\r\n2. 核心是识别字母异位词\r\n3. 有几个关键示例需要分析:\r\n   - 常规情况: [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\r\n   - 空字符串: [\"\"]\r\n   - 单个字符: [\"a\"]\r\n\r\n解题思路的层次:\r\n1. 暴力解法 - 两两比较字符计数\r\n2. 排序法 - 排序后作为key\r\n3. 计数法 - 字符频率作为key\r\n\r\n代码实现要点:\r\n1. 哈希表的选择\r\n2. 字符串排序vs计数\r\n3. 内存分配优化\r\n\r\n需要特别说明的细节:\r\n1. 为什么选择unordered_map\r\n2. sort函数的使用\r\n3. 结果构造方式\r\n\r\n相关题目:\r\n1. 242. 有效的字母异位词\r\n2. 438. 找到字符串中所有字母异位词\r\n\r\n让我按模板组织一个完整的题解。\r\n```\r\n\r\n# 49. 字母异位词分组\r\n\r\n## 一、题目分析\r\n\r\n### 1. 题目要求\r\n- 给定一个字符串数组，将所有字母异位词组合在一起\r\n- 字母异位词指字母相同，但排列不同的字符串\r\n- 返回结果的顺序不重要\r\n\r\n### 2. 关键概念\r\n- 字母异位词：包含相同字母且每个字母出现次数相同的单词\r\n- 分组：将具有相同特征的元素放在一起\r\n- 哈希映射：使用某种特征作为key进行分组\r\n\r\n## 二、示例分析\r\n\r\n### 1. 基本示例\r\n```\r\n输入：[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\r\n输出：[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\r\n解释：\r\n1. \"eat\",\"tea\",\"ate\" 互为字母异位词\r\n2. \"tan\",\"nat\" 互为字母异位词\r\n3. \"bat\" 单独一组\r\n```\r\n\r\n### 2. 特殊情况\r\n```\r\n输入：[\"\"]\r\n输出：[[\"\"]]\r\n解释：空字符串自成一组\r\n```\r\n\r\n### 3. 边界情况\r\n```\r\n输入：[\"a\"]\r\n输出：[[\"a\"]]\r\n解释：单个字符串形成一组\r\n```\r\n\r\n## 三、解题思路\r\n\r\n### 1. 核心策略\r\n- 使用哈希表将具有相同特征的字符串分组\r\n- 关键是找到字母异位词的唯一标识（key）\r\n- 选择排序后的字符串作为key\r\n\r\n### 2. 具体流程\r\n1. 创建哈希表，key为排序后的字符串，value为原始字符串列表\r\n2. 遍历输入数组：\r\n   - 复制并排序当前字符串得到key\r\n   - 将原始字符串加入key对应的列表\r\n3. 收集所有分组到结果数组\r\n\r\n## 四、代码详解\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\r\n        // 哈希表存储分组\r\n        unordered_map<string, vector<string>> mp;\r\n        \r\n        // 遍历并分组\r\n        for (string& str : strs) {\r\n            string key = str;\r\n            sort(key.begin(), key.end());  // 排序得到key\r\n            mp[key].push_back(str);        // 加入对应组\r\n        }\r\n        \r\n        // 构造结果\r\n        vector<vector<string>> ans;\r\n        for (auto& [_, group] : mp) {\r\n            ans.push_back(group);\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n## 五、算法分析\r\n\r\n### 1. 正确性证明\r\n- 字母异位词排序后得到相同的字符串\r\n- 不同组的字符串排序后一定不同\r\n- 哈希表保证了正确的分组\r\n\r\n### 2. 重要细节\r\n- 使用引用避免字符串拷贝\r\n- 排序需要在key的副本上进行\r\n- 使用结构化绑定简化遍历\r\n\r\n## 六、复杂度分析\r\n\r\n- **时间复杂度**: O(nklogk)\r\n  - n是字符串数量\r\n  - k是最长字符串长度\r\n  - 每个字符串需要O(klogk)的排序时间\r\n  \r\n- **空间复杂度**: O(nk)\r\n  - 需要存储所有字符串\r\n  - 哈希表的额外空间\r\n\r\n## 七、常见错误\r\n\r\n1. **直接修改原字符串**\r\n```cpp\r\n// 错误代码\r\nsort(str.begin(), str.end());  // 原字符串被改变\r\nmp[str].push_back(str);        // 存入的是排序后的字符串\r\n```\r\n\r\n2. **忘记处理空字符串**\r\n```cpp\r\n// 需要正确处理\r\nif (strs.empty()) return {};\r\n```\r\n\r\n## 八、相关题目\r\n- [242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/)\r\n- [438. 找到字符串中所有字母异位词](https://leetcode.cn/problems/find-all-anagrams-in-a-string/)\r\n\r\n---\r\n\r\n这个题解完整覆盖了问题的各个方面，从基本概念到代码实现，再到复杂度分析，都有详细的说明。对于初学者来说，通过这个题解可以很好地理解字母异位词分组问题的解决方案。"}]}