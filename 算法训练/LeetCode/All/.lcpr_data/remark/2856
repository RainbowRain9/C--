{"data":[{"name":"2024-11-19 10:53:07","id":1731984787473,"body":"```thinking\r\n让我深入分析一下这道题...\r\n\r\n首先需要理解几个关键概念:\r\n1. 完全子数组的定义 - 必须包含和原数组相同数量的不同元素\r\n2. 子数组必须是连续的\r\n3. 需要统计所有满足条件的子数组个数\r\n\r\n让我用示例[1,3,1,2,2]来分析解题思路:\r\n\r\n1. 原数组有3个不同元素(1,2,3)\r\n2. 对于每个右边界,我们需要找到最左边的位置,使得这段区间包含所有3个不同元素\r\n3. 比如右边界在最后一个2时:\r\n   - 窗口[1,3,1,2,2]满足条件\r\n   - 窗口[3,1,2,2]也满足条件\r\n   - 但[1,2,2]不满足(缺少3)\r\n   所以最左边界应该在第二个位置(3的位置)\r\n\r\n这启发我们使用滑动窗口:\r\n1. 右指针扩展时加入新元素\r\n2. 如果窗口内不同元素个数达标,就尝试收缩左边界\r\n3. left指针最终停在第一个不满足条件的位置\r\n4. 这意味着[0,left-1]内任意位置作为左边界都是合法的\r\n\r\n让我详细解释一下代码实现...\r\n```\r\n\r\n让我详细讲解这道题的解法：\r\n\r\n### 1. 题目分析\r\n给定一个正整数数组，求所有满足以下条件的子数组的数量：\r\n- 子数组中不同元素的数量 = 原数组中不同元素的数量\r\n- 子数组必须是连续的\r\n\r\n### 2. 解题思路\r\n使用滑动窗口算法：\r\n1. 先统计原数组中不同元素的个数\r\n2. 维护一个窗口，记录窗口内每个元素的出现次数\r\n3. 当窗口内不同元素个数达到要求时，收缩左边界并统计答案\r\n\r\n### 3. 代码详解\r\n\r\n```cpp:算法训练/LeetCode/All/2799-统计完全子数组的数目.cpp\r\nclass Solution {\r\npublic:\r\n    int countCompleteSubarrays(vector<int>& nums) {\r\n        // 1. 统计原数组中不同元素的个数\r\n        int totalUnique = unordered_set<int>(nums.begin(), nums.end()).size();\r\n        \r\n        // 2. 初始化窗口\r\n        unordered_map<int, int> window;  // 键:元素值, 值:出现次数\r\n        int left = 0;    // 左边界\r\n        int result = 0;  // 结果计数\r\n        \r\n        // 3. 遍历数组，右边界逐步扩展\r\n        for (int num : nums) {\r\n            // 将当前元素加入窗口\r\n            window[num]++;\r\n            \r\n            // 4. 当窗口内不同元素个数等于原数组时，尝试收缩左边界\r\n            while (window.size() == totalUnique) {\r\n                // 移除最左边的元素\r\n                int leftNum = nums[left++];\r\n                if (--window[leftNum] == 0) {\r\n                    window.erase(leftNum);  // 如果某个元素次数变为0，从窗口中删除\r\n                }\r\n            }\r\n            \r\n            // 5. 统计答案：left表示第一个使窗口不满足条件的位置\r\n            // 因此[0...left-1]范围内的任意位置作为左边界，都能形成完全子数组\r\n            result += left;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n};\r\n```\r\n\r\n### 4. 示例演示\r\n以 `nums = [1,3,1,2,2]` 为例：\r\n1. 首先统计得到 `totalUnique = 3`（1,2,3三个不同元素）\r\n2. 遍历过程：\r\n   ```\r\n   右边界=1: window={1:1}, left=0, result+=0\r\n   右边界=3: window={1:1,3:1}, left=0, result+=0\r\n   右边界=1: window={1:2,3:1}, left=0, result+=0\r\n   右边界=2: window={1:2,3:1,2:1}, left=1, result+=1\r\n   右边界=2: window={1:2,3:1,2:2}, left=2, result+=2\r\n   ```\r\n3. 最终结果 = 4，对应的完全子数组为：\r\n   - [1,3,1,2]\r\n   - [1,3,1,2,2]\r\n   - [3,1,2]\r\n   - [3,1,2,2]\r\n\r\n### 5. 复杂度分析\r\n- 时间复杂度：O(n)，其中n为数组长度\r\n  - 每个元素最多被加入和移除窗口一次\r\n- 空间复杂度：O(k)，其中k为不同元素的个数\r\n  - 需要哈希集合和哈希表存储元素\r\n\r\n### 6. 关键点总结\r\n1. 使用哈希集合快速统计不同元素个数\r\n2. 使用哈希表维护窗口内元素出现次数\r\n3. 滑动窗口的精妙之处在于：left指针停在第一个使窗口不合法的位置，这意味着之前的所有位置都是合法的左边界"}]}