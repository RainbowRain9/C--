{"data":[{"name":"2024-11-23 15:42:10","id":1732347730334,"body":"\r\n\r\n```thinking\r\n让我深入分析这道经典的双指针题目...\r\n\r\n核心要点：\r\n1. 面积计算：宽度 * 高度（较短的一边）\r\n2. 双指针移动策略：\r\n   - 总是移动较短的那一边\r\n   - 因为移动较长的边只会让面积更小\r\n\r\n需要重点解释：\r\n1. 为什么双指针是正确的\r\n2. 为什么要移动较短的边\r\n3. 如何证明不会漏掉最优解\r\n```\r\n\r\n# [11. 盛最多水的容器](https://leetcode.cn/problems/container-with-most-water/)\r\n\r\n## 一、题目分析\r\n\r\n### 1. 题目要求\r\n- 给定一个数组 height，表示不同位置的高度\r\n- 找出两个位置，使得它们与 x 轴构成的容器可以容纳最多的水\r\n\r\n### 2. 关键概念\r\n- 容器的面积 = 宽度 * 高度\r\n- 宽度 = 两个位置的距离\r\n- 高度 = 两个位置高度的较小值\r\n\r\n## 二、解题思路\r\n\r\n### 1. 双指针策略\r\n- 使用左右指针分别指向数组两端\r\n- 计算当前面积\r\n- 移动较短的那一边\r\n\r\n### 2. 正确性证明\r\n- 假设当前左右指针为 i, j\r\n- 如果 height[i] < height[j]：\r\n  - 移动右指针只会让面积更小\r\n  - 因为宽度变小，高度不会超过 height[i]\r\n- 所以应该移动左指针，寻找可能更大的高度\r\n\r\n## 三、代码详解\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    int maxArea(vector<int>& height) {\r\n        int n = height.size();\r\n        int ans = 0;\r\n        int left = 0, right = n - 1;\r\n        \r\n        while (left < right) {\r\n            // 计算当前面积\r\n            // width = right - left\r\n            // height = min(height[left], height[right])\r\n            int area = min(height[left], height[right]) * (right - left);\r\n            ans = max(ans, area);\r\n            \r\n            // 移动较短的一边\r\n            if (height[left] < height[right]) {\r\n                left++;\r\n            } else {\r\n                right--;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n### 代码优化\r\n可以简化面积计算：\r\n```cpp\r\nint area = (right - left) * min(height[left], height[right]);\r\n```\r\n\r\n## 四、算法分析\r\n\r\n### 1. 双指针移动策略\r\n```cpp\r\nif (height[left] < height[right]) {\r\n    left++;    // 移动较短的左边\r\n} else {\r\n    right--;   // 移动较短的右边（相等时也移动右边）\r\n}\r\n```\r\n\r\n### 2. 为什么这样移动是正确的？\r\n- 当前面积受限于较短的边\r\n- 移动较长的边：\r\n  - 宽度一定减少\r\n  - 高度不可能超过较短的边\r\n  - 面积一定变小\r\n- 移动较短的边：\r\n  - 虽然宽度减少\r\n  - 但可能找到更高的边，使面积增大\r\n\r\n### 3. 不会漏掉最优解的证明\r\n- 每次移动都排除了不可能是最优解的情况\r\n- 当前较短的边与其他边组成的面积一定小于当前面积\r\n- 所以可以安全地移动较短的边\r\n\r\n## 五、复杂度分析\r\n\r\n- **时间复杂度**: O(n)\r\n  - 双指针最多遍历整个数组一次\r\n- **空间复杂度**: O(1)\r\n  - 只使用常数额外空间\r\n\r\n## 六、常见错误\r\n\r\n1. **错误的移动策略**\r\n```cpp\r\n// 错误：随意移动指针\r\nif (area < prevArea) {\r\n    left++;\r\n} else {\r\n    right--;\r\n}\r\n```\r\n\r\n2. **面积计算错误**\r\n```cpp\r\n// 错误：使用较大的高度\r\nint area = max(height[left], height[right]) * (right - left);\r\n```\r\n\r\n## 七、相关题目\r\n- [42. 接雨水](https://leetcode.cn/problems/trapping-rain-water/)\r\n- [238. 除自身以外数组的乘积](https://leetcode.cn/problems/product-of-array-except-self/)\r\n\r\n这些题目都需要考虑数组的两端，可以使用类似的双指针技巧。"}]}