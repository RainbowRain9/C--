/*
描述
m块饼分p天吃完，每天吃1块或者2块。问有多少种不同的吃法。

输入
一个正整数n，表示n组案例。

每组案例由两个正整数m和p构成。（m<=20，p<=20）

输出
针对每组案例，输出共有多少种吃完的方法。

每组案例输出完都要换行。

样例输入
1

10 7

样例输出
35
*/

#include <iostream>
using namespace std;

// 函数f：计算在p天内吃完m块饼干的不同方法数
int f(int m, int p) {
    // 基础情况1：如果只有1块饼干，且只有1天，只有一种吃法
    if (m == 1 && p == 1) return 1;
    // 基础情况2：如果有2块饼干，且只有1天，只有一种吃法
    if (m == 2 && p == 1) return 1;
    // 基础情况3：如果只有1天，但饼干超过2块，不可能吃完，返回0
    if (m > 2 && p == 1) return 0;
    // 如果饼干总数小于天数或大于天数的两倍，无法在规定天数内吃完，返回0
    if (m < p || m > 2 * p) return 0;
    // 递归情况：在p-1天内吃完m-1块或m-2块饼干的方案数之和
    return f(m - 1, p - 1) + f(m - 2, p - 1);
}

int main() {
    int n;
    // 输入测试案例的数量n
    cin >> n;
    while (n--) {
        int m, p;
        // 输入每组案例的饼干总数m和天数p
        cin >> m >> p;
        // 输出在p天内吃完m块饼干的不同方法数
        cout << f(m, p) << endl;
    }
    return 0;
}
