/*
问题描述
Catalan 数列是一种常见的数学数列，以比利时数学家Eugène Charles Catalan的名字命名，因为他最早在组合数学领域研究了这个数列。Catalan 数列在许多组合计数问题中都出现，它的定义如下：

Catalan 数列的第 n 项 c(n) 是由以下递推公式定义的：

c(n) = (2n)! / (n! * (n+1)!)

Catalan 数列的前几项为：

c(0) = 1

c(1) = 1

c(2) = 2

c(3) = 5

c(4) = 14

c(5) = 42

...

Catalan 数列在组合计数问题中具有重要的应用，例如计算n个节点的二叉搜索树的个数、n个括号的合法匹配方式的个数、n个元素的凸多边形的三角剖分数等。

在计算 Catalan 数列时，由于阶乘的计算量很大，可能会出现数值溢出的问题。一种避免这种问题的方法是使用递推公式，即利用前面的结果来计算后面的结果。Catalan 数列的递推公式为：

c(n+1) = 2 * (2n+1) / (n+2) * c(n)

使用递推公式可以避免阶乘的计算，同时也可以减少计算量。

请使用递推公式计算 Catalan 数列，输出前n项的内容


输入描述
输入n

输出描述
输出前n项的内容。

样例输入
6

样例输出
c(0) = 1

c(1) = 1

c(2) = 2

c(3) = 5

c(4) = 14

c(5) = 42

提示说明
最后需要回车换行
*/

#include <iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;

    // 初始化 Catalan 数列的前两项
    long long c = 1;
    cout << "c(0) = " << c << endl;

    if (n >= 1)
    {
        c = 1;
        cout << "c(1) = " << c << endl;
    }

    // 计算并输出后续项
    for (int i = 2; i <= n - 1; i++)
    {
        c = (c * (2 * i - 1) * 2) / (i + 1); // 使用递推公式
        cout << "c(" << i << ") = " << c << endl;
    }

    return 0;
}