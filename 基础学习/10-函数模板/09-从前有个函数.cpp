/*
描述
从前有个数学函数f(x)，功能是计算x的因数的个数，例如f(8)=4。（因为8的因数有1、2、4、8）

后来有人觉得算一次f函数不过瘾，又嵌套了一层，于是变成了f(f(x))，那么f(f(8))=f(4)=3。

随后，就有了更多层的嵌套函数f。人们发现这样写太费事了，
于是把嵌套层数当成了f函数的第二个参数，例如f(f(8))写成了f(8,2)，f(9)写成了f(9,1)。

现在，需要计算f(a,b)=?

输入
一个正整数n，表示有n组案例。

每组案例由两个正整数a、b组成。(a<=10亿，b<=10亿）

输出
针对每组案例，输出一个整数，表示f(a,b)的值。

每组案例输出完都要换行。

样例输入
2

8 1

8 2

样例输出
4

3
*/
#include <iostream>  // 引入输入输出流库
#include <cmath>     // 引入数学库，用于计算平方根
using namespace std;

// 函数 f: 计算一个数字x的所有因数之和
long long f(long long x) {
    int count = 0, i;
    for (i = 1; i < sqrt(x); i++) {  // 从1开始，小于x的平方根结束
        if (x % i == 0) {  // 如果x可以被i整除
            count += 2;  // 因数之和加2（包括1和i）
        }
    }
    if (i * i == x) {  // 如果i是x的平方根
        count++;  // 因数之和再加1（包括x本身）
    }
    return count;  // 返回因数之和
}

int main() {
    int n;
    cin >> n;  // 输入测试用例的数量
    while (n--) {  // 循环处理每个测试用例
        long long x, y;
        cin >> x >> y;  // 输入两个数字x和y
        if (x == 1) {  // 如果x等于1
            cout << 1 << endl;  // 输出1
        } else {  // 如果x不等于1
            for (int i = 1; i <= y; i++) {  // 循环y次
                if (x == 2) break;  // 如果x等于2，跳出循环
                x = f(x);  // 否则，计算x的下一个数字
            }
            cout << x << endl;  // 输出x的下一个数字
        }
    }
    return 0;  // 程序结束
}
