/*
描述
有m个同学围成一圈，编号分别是1、2、...、m，其中编号1的是蔡小佬。
从蔡小佬开始报数，他可以任意选择一个正整数p报数，然后编号2的同学应该报的数字是p+1，编号3的同学应该报p+2，
以此类推，循环报数。规定所有报的数字是7的倍数或者含有数字7的同学会被淘汰出局，已经被淘汰的同学不再参与报数。
这样总会在某个时刻，还留在场上的同学会仅剩下一个，这个同学就能被授予大佬的称号。
蔡小佬很想成为大佬，所以他很小心地选择了一个合理的正整数p，这个数字能够让他最终留在场上。
蔡小佬想要知道，所有能够满足条件的正整数p中，最小的一个会是几。

输入
一个正整数n，表示测试案例的数量。

每组案例的有一个正整数m，表示同学的数量。（m<=1000）

输出
针对每组案例，输出一个整数，表示最小的正整数p。

每组案例输出完要换行。

样例输入
2

2

3

样例输出
2

3
*/

#include <iostream>
using namespace std;

// 函数用于判断报的数是否与7有关，如果有关返回true，无关返回false
bool f(int n)
{
    // 如果数字是7的倍数
    if (n % 7 == 0)
    {
        return true;
    }
    // 检查数字的每一位是否为7
    while (n > 0)
    {
        if (n % 10 == 7)
        {
            return true;
        }
        n /= 10; // 移除最低位
    }
    return false; // 如果没有找到7，返回false
}

int main()
{
    int n;    // 测试案例的数量
    cin >> n; // 读取测试案例的数量
    while (n--)
    {             // 对于每个测试案例
        int m;    // 同学的数量
        cin >> m; // 读取同学的数量

        // 创建一个数组来记录每个同学的状态，true表示在场，false表示已淘汰
        bool *a = new bool[m];
        for (int i = 0; i < m; i++)
        {
            a[i] = true; // 初始时所有同学都在场
        }

        int j = 0, p = 0; // j用于报数，p用于记录蔡小佬报数的数
        while (true)
        { // 无限循环，直到蔡小佬是唯一在场的人
            for (int i = 0; i < m; i++)
            { // 遍历所有同学
                if (a[i])
                {        // 如果同学在场
                    j++; // 报数增加
                    if (f(j))
                    {                 // 如果报的数与7有关
                        a[i] = false; // 同学被淘汰
                    }
                }
            }
            int cnt = 0; // 统计在场的人数
            for (int i = 0; i < m; i++)
            {
                if (a[i])
                {
                    cnt++; // 增加在场人数计数
                }
            }
            if (a[0] && cnt == 1)
            {          // 如果蔡小佬在场且是唯一在场的人
                break; // 退出循环
            }
            if (!a[0])
            {          // 如果蔡小佬不在场
                p++;   // 增加蔡小佬报数的次数
                j = p; // 重置报数
                for (int i = 0; i < m; i++)
                { // 重置所有同学的状态
                    a[i] = true;
                }
            }
        }
        cout << p + 1 << endl; // 输出蔡小佬报数的数
        delete[] a;            // 释放动态分配的数组
    }
    return 0;
}