/*
描述
00手上有非常多张（m张）好人卡，每天发1~3张，发完为止，问有多少种发送方法。
注意：第一天发1张第二天发2张和第一天发2张第二天发1张，是两种不同的发送方法。

输入
第1行是一个正整数n，表示测试案例的数量。

从第2行到第n+1行，每行有1个正整数m（m<=50000000）。

输出
针对每组测试案例，计算这m张好人卡发送方法的总数，
因为这个数字可能非常大，所以只要输出这个数字对100000007取模的结果。

每组案例输出完后都要换行。

样例输入
2

3

100

样例输出
4

99298679
*/

#include <iostream>
using namespace std;

int main() {
    int n; // 存储测试案例的数量
    cin >> n; // 读取测试案例的数量
    while (n--) { // 对于每个测试案例
        long long int m; // 存储好人卡的总张数m
        cin >> m; // 读取好人卡的总张数m
        int a = 1, b = 2, c = 4; // 初始化前三个数字，对应于斐波那契数列的变种
        // 从第四个数字开始计算，直到第m个数字
        for (int i = 1; i < m; i++) {
            int t = a; // 保存当前的a值，用于之后的计算
            a = b; // 更新a为b的值
            b = c; // 更新b为c的值
            // 计算新的c值，即下一个数字，取模操作是为了处理大数的情况
            c = (t + a + b) % int(1e8 + 7);
        }
        // 输出最终计算得到的c值，即对100000007取模的结果
        cout << a << endl; // 输出最终的结果
    }
    return 0; // 程序结束
}