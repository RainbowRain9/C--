/*
描述
输入 m 个正整数，输出其中出现次数最多的数字（可能有多个数字的出现次数并列第一多）

输入
第一行是一个正整数 n 表示测试用例的数量。

每组案例中，首先是一个正整数 m，然后是 m 个正整数，这些数字均不大于 1000。

输出
针对每组案例，输出这 m 个正整数中，出现次数最多的数字。

如果有多个数字出现次数并列最多，则按照从小到大的顺序输出这些数字，
每个数字之间用一个空格间隔，最后一个数字之后没有空格。

每组案例输出完都要换行。

样例输入
1

5 1 2 4 1 4

样例输出
1 4
*/

#include<iostream>
using namespace std;

int main() {
    int n; // 存储测试用例的数量
    cin >> n; // 读取测试用例的数量
    while (n--) { // 对于每个测试用例
        int m; // 存储每个测试用例中的正整数数量
        cin >> m; // 读取正整数的数量
        int* a = new int[m]; // 动态分配一个大小为m的整数数组a
        int cnt[1001] = {0}; // 初始化一个大小为1001的数组cnt，用于统计每个数字的出现次数
        int maxCnt = 0; // 初始化最大出现次数为0

        // 读取m个正整数到数组a中，并更新cnt数组以统计每个数字的出现次数
        for (int i = 0; i < m; i++) {
            int num; // 存储当前读取的整数
            cin >> num; // 从输入读取一个整数
            a[i] = num; // 将读取的整数存储到数组a中
            cnt[num]++; // 增加对应数字在cnt数组中的计数
            // 如果当前数字的出现次数大于或等于已知的最大次数，则更新最大次数
            if (cnt[num] > maxCnt) {
                maxCnt = cnt[num];
            }
        }

        // 定义一个标志变量f，用于控制输出格式（避免在第一个数字前输出空格）
        bool f = true;
        // 遍历cnt数组，找出所有出现次数等于maxCnt的数字，并输出它们
        for (int i = 0; i < 1001; i++) {
            if (cnt[i] == maxCnt) { // 如果当前数字的出现次数等于最大次数
                if (f) { // 如果是第一个输出的数字
                    cout << i; // 输出数字
                    f = false; // 设置标志变量为false，因为后续数字前需要有空格
                } else { // 如果不是第一个数字
                    cout << " " << i; // 在数字前输出一个空格，并输出数字
                }
            }
        }
        cout << endl; // 每个测试用例的输出结束后，输出一个换行符

        // 释放动态分配的数组a的内存
        delete[] a;
    }
    return 0; // 程序结束
}